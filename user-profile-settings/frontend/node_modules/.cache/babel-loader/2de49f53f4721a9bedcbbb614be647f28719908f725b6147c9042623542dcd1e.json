{"ast":null,"code":"import axios from 'axios';\n\n// Check if we're in development mode\nconst isDevelopment = process.env.NODE_ENV === 'development';\n\n// Get the API URL from environment variables or use a default\nconst BASE_API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\nconsole.log('API URL:', BASE_API_URL);\nconsole.log('Environment:', process.env.NODE_ENV);\n\n// In-memory mock data for development\nconst mockUserData = {\n  usr_001: {\n    userId: 'usr_001',\n    fullName: 'Fawad Khan',\n    emailAddress: 'fawad.khan@example.com',\n    userRole: 'Researcher',\n    isProfilePublic: true,\n    isNotificationsEnabled: true\n  }\n};\n\n// Create axios instance\nconst apiClient = axios.create({\n  baseURL: BASE_API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to include auth token in every request\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  console.log('API Request:', config.method.toUpperCase(), config.url, config.data);\n  return config;\n}, error => {\n  console.error('Request error:', error);\n  return Promise.reject(error);\n});\n\n// Add response interceptor to handle auth errors\napiClient.interceptors.response.use(response => {\n  console.log('API Response:', response.status, response.data);\n  return response;\n}, error => {\n  console.error('Response error:', error.response || error.message);\n  if (error.response && error.response.status === 401) {\n    // Unauthorized - clear token and redirect to login\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('currentUser');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nconst handleApiError = (error, message) => {\n  console.error(`${message}:`, error.response ? error.response.data : error.message);\n  throw error;\n};\n\n// Mock API implementation for development\nconst mockApi = {\n  getUser: userId => {\n    console.log('Mock API: Getting user', userId);\n    return Promise.resolve({\n      ...mockUserData[userId]\n    });\n  },\n  updateUser: (userId, userData) => {\n    console.log('Mock API: Updating user', userId, userData);\n    mockUserData[userId] = {\n      ...mockUserData[userId],\n      ...userData\n    };\n    return Promise.resolve({\n      ...mockUserData[userId]\n    });\n  },\n  updateVisibility: (userId, isPublic) => {\n    console.log('Mock API: Updating visibility', userId, isPublic);\n    mockUserData[userId].isProfilePublic = isPublic;\n    return Promise.resolve({\n      ...mockUserData[userId]\n    });\n  },\n  updateNotifications: (userId, isEnabled) => {\n    console.log('Mock API: Updating notifications', userId, isEnabled);\n    mockUserData[userId].isNotificationsEnabled = isEnabled;\n    return Promise.resolve({\n      ...mockUserData[userId]\n    });\n  }\n};\n\n// User Profile API Calls\nexport const fetchUserDetails = async userId => {\n  try {\n    // Use mock API in development mode\n    if (isDevelopment) {\n      const data = await mockApi.getUser(userId);\n      return data;\n    }\n    const response = await apiClient.get(`/users/${userId}`);\n    return response.data;\n  } catch (error) {\n    handleApiError(error, 'Failed to fetch user details');\n  }\n};\nexport const saveUserDetails = async (userId, userData) => {\n  try {\n    // Use mock API in development mode\n    if (isDevelopment) {\n      const data = await mockApi.updateUser(userId, userData);\n      return data;\n    }\n    const response = await apiClient.put(`/users/${userId}`, userData);\n    return response.data;\n  } catch (error) {\n    handleApiError(error, 'Failed to update user profile');\n  }\n};\n\n// User Settings API Calls\nexport const updateProfileStatus = async (userId, isPublic) => {\n  try {\n    console.log(`Updating profile visibility for ${userId} to ${isPublic}`);\n\n    // Use mock API in development mode\n    if (isDevelopment) {\n      const data = await mockApi.updateVisibility(userId, isPublic);\n      return data;\n    }\n    const response = await apiClient.patch(`/users/${userId}/visibility`, {\n      isPublic\n    });\n    return response.data;\n  } catch (error) {\n    handleApiError(error, 'Failed to update profile visibility');\n  }\n};\nexport const updateNotificationSettings = async (userId, isEnabled) => {\n  try {\n    console.log(`Updating notifications for ${userId} to ${isEnabled}`);\n\n    // Use mock API in development mode\n    if (isDevelopment) {\n      const data = await mockApi.updateNotifications(userId, isEnabled);\n      return data;\n    }\n    const response = await apiClient.patch(`/users/${userId}/notifications`, {\n      isEnabled\n    });\n    return response.data;\n  } catch (error) {\n    handleApiError(error, 'Failed to update notification settings');\n  }\n};\n\n// Export API functions\nconst apiService = {\n  fetchUserDetails,\n  saveUserDetails,\n  updateProfileStatus,\n  updateNotificationSettings\n};\nexport default apiService;","map":{"version":3,"names":["axios","isDevelopment","process","env","NODE_ENV","BASE_API_URL","REACT_APP_API_URL","console","log","mockUserData","usr_001","userId","fullName","emailAddress","userRole","isProfilePublic","isNotificationsEnabled","apiClient","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","method","toUpperCase","url","data","error","Promise","reject","response","status","message","removeItem","window","location","href","handleApiError","mockApi","getUser","resolve","updateUser","userData","updateVisibility","isPublic","updateNotifications","isEnabled","fetchUserDetails","get","saveUserDetails","put","updateProfileStatus","patch","updateNotificationSettings","apiService"],"sources":["C:/Users/18265693/Desktop/sem2-proj/Project/thintank-proj/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Check if we're in development mode\r\nconst isDevelopment = process.env.NODE_ENV === 'development';\r\n\r\n// Get the API URL from environment variables or use a default\r\nconst BASE_API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\r\n\r\nconsole.log('API URL:', BASE_API_URL);\r\nconsole.log('Environment:', process.env.NODE_ENV);\r\n\r\n// In-memory mock data for development\r\nconst mockUserData = {\r\n  usr_001: {\r\n    userId: 'usr_001',\r\n    fullName: 'Fawad Khan',\r\n    emailAddress: 'fawad.khan@example.com',\r\n    userRole: 'Researcher',\r\n    isProfilePublic: true,\r\n    isNotificationsEnabled: true\r\n  }\r\n};\r\n\r\n// Create axios instance\r\nconst apiClient = axios.create({\r\n  baseURL: BASE_API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add request interceptor to include auth token in every request\r\napiClient.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('authToken');\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    console.log('API Request:', config.method.toUpperCase(), config.url, config.data);\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('Request error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add response interceptor to handle auth errors\r\napiClient.interceptors.response.use(\r\n  (response) => {\r\n    console.log('API Response:', response.status, response.data);\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('Response error:', error.response || error.message);\r\n    if (error.response && error.response.status === 401) {\r\n      // Unauthorized - clear token and redirect to login\r\n      localStorage.removeItem('authToken');\r\n      localStorage.removeItem('currentUser');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nconst handleApiError = (error, message) => {\r\n  console.error(`${message}:`, error.response ? error.response.data : error.message);\r\n  throw error;\r\n};\r\n\r\n// Mock API implementation for development\r\nconst mockApi = {\r\n  getUser: (userId) => {\r\n    console.log('Mock API: Getting user', userId);\r\n    return Promise.resolve({ ...mockUserData[userId] });\r\n  },\r\n  \r\n  updateUser: (userId, userData) => {\r\n    console.log('Mock API: Updating user', userId, userData);\r\n    mockUserData[userId] = { ...mockUserData[userId], ...userData };\r\n    return Promise.resolve({ ...mockUserData[userId] });\r\n  },\r\n  \r\n  updateVisibility: (userId, isPublic) => {\r\n    console.log('Mock API: Updating visibility', userId, isPublic);\r\n    mockUserData[userId].isProfilePublic = isPublic;\r\n    return Promise.resolve({ ...mockUserData[userId] });\r\n  },\r\n  \r\n  updateNotifications: (userId, isEnabled) => {\r\n    console.log('Mock API: Updating notifications', userId, isEnabled);\r\n    mockUserData[userId].isNotificationsEnabled = isEnabled;\r\n    return Promise.resolve({ ...mockUserData[userId] });\r\n  }\r\n};\r\n\r\n// User Profile API Calls\r\nexport const fetchUserDetails = async (userId) => {\r\n  try {\r\n    // Use mock API in development mode\r\n    if (isDevelopment) {\r\n      const data = await mockApi.getUser(userId);\r\n      return data;\r\n    }\r\n    \r\n    const response = await apiClient.get(`/users/${userId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'Failed to fetch user details');\r\n  }\r\n};\r\n\r\nexport const saveUserDetails = async (userId, userData) => {\r\n  try {\r\n    // Use mock API in development mode\r\n    if (isDevelopment) {\r\n      const data = await mockApi.updateUser(userId, userData);\r\n      return data;\r\n    }\r\n    \r\n    const response = await apiClient.put(`/users/${userId}`, userData);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'Failed to update user profile');\r\n  }\r\n};\r\n\r\n// User Settings API Calls\r\nexport const updateProfileStatus = async (userId, isPublic) => {\r\n  try {\r\n    console.log(`Updating profile visibility for ${userId} to ${isPublic}`);\r\n    \r\n    // Use mock API in development mode\r\n    if (isDevelopment) {\r\n      const data = await mockApi.updateVisibility(userId, isPublic);\r\n      return data;\r\n    }\r\n    \r\n    const response = await apiClient.patch(`/users/${userId}/visibility`, { isPublic });\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'Failed to update profile visibility');\r\n  }\r\n};\r\n\r\nexport const updateNotificationSettings = async (userId, isEnabled) => {\r\n  try {\r\n    console.log(`Updating notifications for ${userId} to ${isEnabled}`);\r\n    \r\n    // Use mock API in development mode\r\n    if (isDevelopment) {\r\n      const data = await mockApi.updateNotifications(userId, isEnabled);\r\n      return data;\r\n    }\r\n    \r\n    const response = await apiClient.patch(`/users/${userId}/notifications`, { isEnabled });\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'Failed to update notification settings');\r\n  }\r\n};\r\n\r\n// Export API functions\r\nconst apiService = {\r\n  fetchUserDetails,\r\n  saveUserDetails,\r\n  updateProfileStatus,\r\n  updateNotificationSettings,\r\n};\r\n\r\nexport default apiService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}