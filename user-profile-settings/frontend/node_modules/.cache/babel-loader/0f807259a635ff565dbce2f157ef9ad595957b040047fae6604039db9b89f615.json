{"ast":null,"code":"import axios from 'axios';\nconst BASE_API_URL = process.env.REACT_APP_API_URL;\n\n// Modified to include auth token in requests\nconst apiClient = axios.create({\n  baseURL: BASE_API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to include auth token in every request\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add response interceptor to handle auth errors\napiClient.interceptors.response.use(response => {\n  return response;\n}, error => {\n  if (error.response && error.response.status === 401) {\n    // Unauthorized - clear token and redirect to login\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('currentUser');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nconst handleApiError = (error, message) => {\n  console.error(`${message}:`, error.response ? error.response.data : error.message);\n  throw error;\n};\n\n// User Profile API Calls\nexport const fetchUserDetails = async userId => {\n  try {\n    const response = await apiClient.get(`/users/${userId}`);\n    return response.data;\n  } catch (error) {\n    handleApiError(error, 'Failed to fetch user details');\n  }\n};\nexport const saveUserDetails = async (userId, userData) => {\n  try {\n    const response = await apiClient.put(`/users/${userId}`, userData);\n    return response.data;\n  } catch (error) {\n    handleApiError(error, 'Failed to update user profile');\n  }\n};\n\n// User Settings API Calls\nexport const updateProfileStatus = async (userId, isPublic) => {\n  try {\n    const response = await apiClient.patch(`/users/${userId}/visibility`, {\n      isPublic\n    });\n    return response.data;\n  } catch (error) {\n    handleApiError(error, 'Failed to update profile visibility');\n  }\n};\nexport const updateNotificationSettings = async (userId, isEnabled) => {\n  try {\n    const response = await apiClient.patch(`/users/${userId}/notifications`, {\n      isEnabled\n    });\n    return response.data;\n  } catch (error) {\n    handleApiError(error, 'Failed to update notification settings');\n  }\n};\n\n// Export API functions\nconst apiService = {\n  fetchUserDetails,\n  saveUserDetails,\n  updateProfileStatus,\n  updateNotificationSettings\n};\nexport default apiService;","map":{"version":3,"names":["axios","BASE_API_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","response","status","removeItem","window","location","href","handleApiError","message","console","data","fetchUserDetails","userId","get","saveUserDetails","userData","put","updateProfileStatus","isPublic","patch","updateNotificationSettings","isEnabled","apiService"],"sources":["C:/Users/18265693/Desktop/sem2-proj/Project/thintank-proj/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst BASE_API_URL = process.env.REACT_APP_API_URL;\r\n\r\n// Modified to include auth token in requests\r\nconst apiClient = axios.create({\r\n  baseURL: BASE_API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add request interceptor to include auth token in every request\r\napiClient.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('authToken');\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add response interceptor to handle auth errors\r\napiClient.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    if (error.response && error.response.status === 401) {\r\n      // Unauthorized - clear token and redirect to login\r\n      localStorage.removeItem('authToken');\r\n      localStorage.removeItem('currentUser');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nconst handleApiError = (error, message) => {\r\n  console.error(`${message}:`, error.response ? error.response.data : error.message);\r\n  throw error;\r\n};\r\n\r\n// User Profile API Calls\r\nexport const fetchUserDetails = async (userId) => {\r\n  try {\r\n    const response = await apiClient.get(`/users/${userId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'Failed to fetch user details');\r\n  }\r\n};\r\n\r\nexport const saveUserDetails = async (userId, userData) => {\r\n  try {\r\n    const response = await apiClient.put(`/users/${userId}`, userData);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'Failed to update user profile');\r\n  }\r\n};\r\n\r\n// User Settings API Calls\r\nexport const updateProfileStatus = async (userId, isPublic) => {\r\n  try {\r\n    const response = await apiClient.patch(`/users/${userId}/visibility`, { isPublic });\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'Failed to update profile visibility');\r\n  }\r\n};\r\n\r\nexport const updateNotificationSettings = async (userId, isEnabled) => {\r\n  try {\r\n    const response = await apiClient.patch(`/users/${userId}/notifications`, { isEnabled });\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'Failed to update notification settings');\r\n  }\r\n};\r\n\r\n// Export API functions\r\nconst apiService = {\r\n  fetchUserDetails,\r\n  saveUserDetails,\r\n  updateProfileStatus,\r\n  updateNotificationSettings,\r\n};\r\n\r\nexport default apiService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}